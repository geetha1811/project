Hereâ€™s the simplified version of the code without using maps, hashmaps, or for-loops for processing the result set directly into a custom class.

Code:

public BreakdownResult getBreakdownResult(String basicId, String businessDate) throws ServiceException {
    Connection con = null;
    CallableStatement cs = null;
    ResultSet headerRS = null;
    ResultSet resultRS = null;
    BreakdownResult breakdownResult = new BreakdownResult();
    String status = "";

    try {
        // Establishing connection
        con = this.jdbcTemplate.getDataSource().getConnection();

        // Preparing callable statement
        cs = con.prepareCall("{call IRIS.SP_GET_BREAKDOWN_RESULT(?, ?, ?, ?, ?)}");

        // Setting input parameters
        cs.setString(1, basicId);
        cs.setString(2, businessDate);

        // Registering output parameters
        cs.registerOutParameter(3, oracle.jdbc.OracleTypes.CURSOR); // Header set
        cs.registerOutParameter(4, oracle.jdbc.OracleTypes.CURSOR); // Result set
        cs.registerOutParameter(5, java.sql.Types.VARCHAR);        // Status

        // Executing stored procedure
        cs.execute();

        // Getting status
        status = cs.getString(5);
        if (!"SUCCESS".equalsIgnoreCase(status)) {
            throw new ServiceException("Stored Procedure returned status: " + status);
        }

        // Retrieving Header Set
        headerRS = (ResultSet) cs.getObject(3);
        if (headerRS.next()) {
            breakdownResult.setHeaderSet(headerRS.getString(1)); // Assuming only one header value
        }

        // Retrieving Result Set
        resultRS = (ResultSet) cs.getObject(4);
        if (resultRS.next()) {
            breakdownResult.setValue1(resultRS.getString(1)); // Assuming first column value
            breakdownResult.setValue2(resultRS.getString(2)); // Assuming second column value
            breakdownResult.setValue3(resultRS.getString(3)); // Assuming third column value
        }

        // Setting status as successful
        breakdownResult.setStatus("SUCCESS");

    } catch (Exception e) {
        throw new ServiceException("Error while executing getBreakdownResult: ", e);
    } finally {
        // Closing resources
        DBUtils.closeQuietly(cs);
        DBUtils.closeQuietly(headerRS);
        DBUtils.closeQuietly(resultRS);
        DBUtils.closeQuietly(con);
    }

    return breakdownResult;
}


---

Assumptions:

1. Header Set:

Only one column is retrieved from the header result set. This is stored as a single string in the BreakdownResult object.



2. Result Set:

Data from the result set is mapped directly to specific fields (value1, value2, etc.) in the BreakdownResult object.

This assumes you know the exact number of columns and their order.



3. BreakdownResult Class: Update your BreakdownResult class to have specific fields for the data, such as:



public class BreakdownResult {
    private String headerSet;
    private String value1;
    private String value2;
    private String value3;
    private String status;

    // Getters and Setters
    public String getHeaderSet() {
        return headerSet;
    }

    public void setHeaderSet(String headerSet) {
        this.headerSet = headerSet;
    }

    public String getValue1() {
        return value1;
    }

    public void setValue1(String value1) {
        this.value1 = value1;
    }

    public String getValue2() {
        return value2;
    }

    public void setValue2(String value2) {
        this.value2 = value2;
    }

    public String getValue3() {
        return value3;
    }

    public void setValue3(String value3) {
        this.value3 = value3;
    }

    public String getStatus() {
        return status;
    }

    public void setStatus(String status) {
        this.status = status;
    }
}


---

Key Points:

1. No Loops or Maps:

Data is directly assigned to specific fields in the BreakdownResult object.



2. Error Handling:

If the procedure fails, an exception is thrown with the status returned.



3. Clean Resource Management:

All resources (connections, result sets, etc.) are properly closed in the finally block.




Let me know if this approach works!

