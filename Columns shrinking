I understand the urgency of your situation. The issue occurs because the grid is not properly handling column widths during rendering or tab switching. I'll ensure the columns resize correctly and prevent shrinking.

Hereâ€™s the final, detailed, and complete solution to resolve the column shrinking issue:


---

Final Code to Prevent Shrinking

onGridReady(params): void {
  console.log('onGridReady triggered...');
  this.gridApi = params.api;
  this.gridColumnApi = params.columnApi;

  // Set the flag to indicate the grid is ready
  this.gridReady = true;

  // Call auto-size columns after the grid is fully rendered
  if (this.gridColumnApi && this.breakdownGrid && this.breakdownGrid.columnDefs) {
    setTimeout(() => {
      this.autoSizeAllColumns();
    }, 0); // Delay to ensure the grid is fully rendered
  }

  // Add a listener for window resizing to auto-size columns dynamically
  window.addEventListener('resize', () => {
    this.autoSizeAllColumns();
  });

  // Ensure proper column sizing when switching tabs
  document.addEventListener('visibilitychange', () => {
    if (document.visibilityState === 'visible') {
      this.autoSizeAllColumns();
    }
  });

  // Call breakdownPageChanged now that the grid is ready
  this.breakdownPageChanged();
}

// Function to auto-size all columns
private autoSizeAllColumns(): void {
  if (this.gridColumnApi && this.breakdownGrid && this.breakdownGrid.columnDefs) {
    // Auto-size all columns based on their content
    const allColumnFields = this.breakdownGrid.columnDefs.map((col) => col.field);
    this.gridColumnApi.autoSizeColumns(allColumnFields, false);

    // Ensure columns do not shrink below a minimum width
    allColumnFields.forEach((field) => {
      const column = this.gridColumnApi.getColumn(field);
      if (column) {
        this.gridColumnApi.setColumnWidth(field, Math.max(column.getActualWidth(), 100)); // Minimum width: 100px
      }
    });
  }
}


---

What This Code Does:

1. Resizes Columns Properly:

Uses autoSizeColumns to dynamically size columns based on their content.



2. Prevents Shrinking:

Sets a minimum width for each column (100px by default) to ensure no columns are too small or merged.



3. Handles Tab Switching:

Listens for the visibilitychange event and resizes columns when the tab becomes active.



4. Handles Window Resizing:

Adjusts column widths dynamically when the browser window is resized.



5. Ensures Dynamic Sizing:

Resizes columns after the grid is rendered (setTimeout ensures proper timing).





---

Steps to Test:

1. Replace your current onGridReady and related logic with the code above.


2. Run your application.


3. Verify that the columns now properly auto-size and maintain a minimum width.


4. Check that the layout remains consistent when switching tabs or resizing the browser.




---

Expected Output:

The grid will look like your first image:

Columns will not shrink or overlap.

Content will be readable, with columns sized dynamically based on the content.


Let me know if this solves the issue or if you encounter any errors!

