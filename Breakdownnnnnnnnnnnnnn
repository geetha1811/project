Here is the complete code for your Angular frontend based on the requirements and backend responses.


---

Service File: basicDetailsService.ts

This service fetches the dropdown data and the breakdown results from the backend.

import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable, throwError } from 'rxjs';
import { catchError, map } from 'rxjs/operators';

@Injectable({
  providedIn: 'root'
})
export class BasicDetailsService {
  private baseUrl = 'your-backend-url'; // Replace with your backend URL

  constructor(private http: HttpClient) {}

  getDropdown(): Observable<any> {
    return this.http.get(`${this.baseUrl}/rest/breakDown/dropDown`)
      .pipe(
        map(response => response),
        catchError(error => {
          console.error('Error fetching dropdown data:', error);
          return throwError('Error fetching dropdown data');
        })
      );
  }

  getBreakdownResult(basicId: string, businessDate: string, rc: string): Observable<any> {
    return this.http.get(`${this.baseUrl}/rest/breakDown/result/${basicId}/${businessDate}/${rc}`)
      .pipe(
        map(response => response),
        catchError(error => {
          console.error('Error fetching breakdown result:', error);
          return throwError('Error fetching breakdown result');
        })
      );
  }
}


---

Component File: basicMappingPopupModal.component.ts

This component manages the dropdown data, user input, and table display.

import { Component, OnInit } from '@angular/core';
import { BasicDetailsService } from './basicDetailsService';

@Component({
  selector: 'app-basic-mapping-popup-modal',
  templateUrl: './basicMappingPopupModal.component.html',
  styleUrls: ['./basicMappingPopupModal.component.css']
})
export class BasicMappingPopupModalComponent implements OnInit {
  dropdownOptions: any[] = [];
  selectedDropdown: any = null;
  selectedDate: string = '';
  rc: string = 'default-rc'; // Set default RC if required
  description: string = '';
  tableHeaders: string[] = [];
  tableData: any[] = [];

  constructor(private basicDetailsService: BasicDetailsService) {}

  ngOnInit(): void {
    // Fetch dropdown options on component initialization
    this.basicDetailsService.getDropdown().subscribe((data: any) => {
      this.dropdownOptions = data;
    });
  }

  onDropdownSelect(option: any): void {
    this.selectedDropdown = option;
    this.description = option.description;
  }

  onRun(): void {
    if (!this.selectedDropdown || !this.selectedDate) {
      alert('Please select a dropdown option and date');
      return;
    }

    const basicId = this.selectedDropdown.id;

    this.basicDetailsService.getBreakdownResult(basicId, this.selectedDate, this.rc)
      .subscribe((response: any) => {
        this.tableHeaders = response.headerSet;
        this.tableData = response.resultSet;
      });
  }
}


---

HTML File: basicMappingPopupModal.component.html

This is the template for the UI, including dropdown, date picker, run button, and table.

<div class="container">
  <!-- Dropdown Section -->
  <div class="dropdown-section">
    <label for="dropdown">Select Source:</label>
    <select id="dropdown" (change)="onDropdownSelect($event.target.value)">
      <option *ngFor="let option of dropdownOptions" [value]="option">{{ option.name }}</option>
    </select>
  </div>

  <!-- Description Section -->
  <div class="description-section">
    <label for="description">Description:</label>
    <textarea id="description" [value]="description" readonly></textarea>
  </div>

  <!-- Date Picker Section -->
  <div class="date-section">
    <label for="date">Select Date:</label>
    <input type="date" id="date" [(ngModel)]="selectedDate" />
  </div>

  <!-- Run Button -->
  <div class="button-section">
    <button (click)="onRun()">Run</button>
  </div>

  <!-- Table Section -->
  <div class="table-section" *ngIf="tableHeaders.length && tableData.length">
    <table>
      <thead>
        <tr>
          <th *ngFor="let header of tableHeaders">{{ header }}</th>
        </tr>
      </thead>
      <tbody>
        <tr *ngFor="let row of tableData">
          <td *ngFor="let header of tableHeaders">{{ row[header] }}</td>
        </tr>
      </tbody>
    </table>
  </div>
</div>


---

CSS File: basicMappingPopupModal.component.css

Add styles to make the UI visually appealing.

.container {
  margin: 20px;
}

.dropdown-section,
.description-section,
.date-section,
.button-section {
  margin-bottom: 15px;
}

textarea {
  width: 100%;
  height: 50px;
  resize: none;
}

table {
  width: 100%;
  border-collapse: collapse;
  margin-top: 20px;
}

th, td {
  border: 1px solid #ccc;
  padding: 10px;
  text-align: left;
}


---

Execution Steps

1. Backend Setup:

Ensure the backend APIs /rest/breakDown/dropDown and /rest/breakDown/result/{basicId}/{businessDate}/{rc} are properly implemented and returning the required data.



2. Environment Configuration:

Replace your-backend-url in the service file with the actual backend URL.



3. Angular Setup:

Add FormsModule and HttpClientModule to your AppModule.


import { FormsModule } from '@angular/forms';
import { HttpClientModule } from '@angular/common/http';

@NgModule({
  declarations: [ /* your components */ ],
  imports: [
    FormsModule,
    HttpClientModule,
    /* other modules */
  ],
})
export class AppModule {}


4. Run the Application:

Start your Angular application using ng serve.

Navigate to the component's route and test the dropdown, date selection, and run button functionality.





---

Expected Output

Dropdown populated with options from /rest/breakDown/dropDown.

Description displayed for the selected dropdown option.

After selecting a date and clicking "Run":

Table headers from headerSet displayed as column names.

Table data from resultSet displayed in rows.



Let me know if you need further clarifications!

