Here is how you can adapt the code structure shown in the image for your dropdown stored procedure (IRIS.SP_GET_RC_DROPDOWN). This will use a CallableStatement and handle the SYS_REFCURSOR as output, similar to the example you provided.


---

Repository Code (Adapted for Dropdown)

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Repository;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

@Repository
public class BreakDownRepository {

    @Autowired
    private JdbcTemplate jdbcTemplate;

    private static final String SP_GET_RC_DROPDOWN_SQL = "{call IRIS.SP_GET_RC_DROPDOWN(?)}";

    public List<Breakdown> getBreakdown() throws ServiceException {
        Connection con = null;
        CallableStatement cs = null;
        ResultSet rs = null;
        List<Breakdown> breakdownList = new ArrayList<>();

        try {
            // Get database connection
            con = this.jdbcTemplate.getDataSource().getConnection();
            cs = con.prepareCall(SP_GET_RC_DROPDOWN_SQL);

            // Register OUT parameter for SYS_REFCURSOR
            cs.registerOutParameter(1, oracle.jdbc.OracleTypes.CURSOR);

            // Execute the stored procedure
            cs.execute();

            // Retrieve the result set from the OUT parameter
            rs = (ResultSet) cs.getObject(1);

            // Map the result set to Breakdown objects
            while (rs.next()) {
                Breakdown breakdown = new Breakdown();
                breakdown.setId(rs.getLong("id"));
                breakdown.setName(rs.getString("name"));
                breakdownList.add(breakdown);
            }

        } catch (SQLException e) {
            throw new ServiceException("Error fetching dropdown data from stored procedure.", e);
        } finally {
            // Close resources
            DbUtils.closeQuietly(rs);
            DbUtils.closeQuietly(cs);
            DbUtils.closeQuietly(con);
        }

        return breakdownList;
    }
}


---

Explanation

1. Procedure Call:

SP_GET_RC_DROPDOWN_SQL defines the SQL call for the stored procedure with one SYS_REFCURSOR as the output.



2. Connection:

Obtains a database connection from JdbcTemplate.



3. CallableStatement:

Prepares a call to the stored procedure.

Registers the SYS_REFCURSOR as an output parameter.



4. ResultSet Mapping:

Extracts the cursor from the CallableStatement and iterates over it to map the result set into Breakdown objects.



5. Error Handling:

Throws a custom ServiceException for any SQL errors.



6. Resource Management:

Ensures all database resources (ResultSet, CallableStatement, and Connection) are properly closed using DbUtils.closeQuietly.





---

Service Code

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class BreakDownService {

    @Autowired
    private BreakDownRepository breakDownRepository;

    public List<Breakdown> getBreakdown() throws ServiceException {
        return breakDownRepository.getBreakdown();
    }
}


---

Controller Code

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;

import java.util.List;

@RestController
public class BreakDownController {

    @Autowired
    private BreakDownService breakDownService;

    @GetMapping("/api/breakdown")
    public List<Breakdown> getBreakdown() {
        try {
            return breakDownService.getBreakdown();
        } catch (ServiceException e) {
            throw new RuntimeException("Error retrieving breakdown data", e);
        }
    }
}


---

Model Class (Breakdown)

public class Breakdown {
    private Long id;
    private String name;

    // Getters and Setters
    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }
}


---

Utility Class for Closing Resources (DbUtils)

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;

public class DbUtils {
    public static void closeQuietly(ResultSet rs) {
        try {
            if (rs != null) rs.close();
        } catch (Exception ignored) {
        }
    }

    public static void closeQuietly(Statement stmt) {
        try {
            if (stmt != null) stmt.close();
        } catch (Exception ignored) {
        }
    }

    public static void closeQuietly(Connection conn) {
        try {
            if (conn != null) conn.close();
        } catch (Exception ignored) {
        }
    }
}


---

Differences Compared to Your Image

Direct SYS_REFCURSOR Handling:

Like your example, it directly handles SYS_REFCURSOR as an output parameter using a CallableStatement.


Manual Mapping:

Maps the result set directly to the Breakdown object in the repository method, avoiding the need for additional RowMapper.


Resource Handling:

Ensures all resources are closed safely in the finally block using a utility method (DbUtils).




---

This implementation aligns with your provided code structure and handles the dropdown stored procedure in a similar way. Let me know if you need further clarification!

