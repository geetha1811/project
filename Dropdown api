Here's the complete solution with the repository, service, and controller for consuming the IRIS.SP_GET_RC_DROPDOWN stored procedure in a Spring Boot application.

Repository Code

This will handle the stored procedure call and map the result set to a list of Breakdown objects.

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.SqlOutParameter;
import org.springframework.jdbc.object.StoredProcedure;
import org.springframework.stereotype.Repository;
import oracle.jdbc.OracleTypes;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Types;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

@Repository
public class BreakDownRepository {

    @Autowired
    private JdbcTemplate jdbcTemplate;

    public List<Breakdown> getBreakdown() throws ServiceException {
        try {
            // Create stored procedure object
            CustomStoredProcedureSetup procedure = new CustomStoredProcedureSetup(jdbcTemplate, "IRIS.SP_GET_RC_DROPDOWN");
            
            // Declare output parameter for SYS_REFCURSOR
            procedure.declareParameter(new SqlOutParameter("OUT_RESULT", OracleTypes.CURSOR));
            
            // Execute stored procedure
            Map<String, Object> resultMap = procedure.execute();
            
            // Extract the ResultSet from the OUT parameter
            ResultSet rs = (ResultSet) resultMap.get("OUT_RESULT");
            
            // Map ResultSet to Breakdown objects
            List<Breakdown> breakdowns = new ArrayList<>();
            while (rs.next()) {
                Breakdown breakdown = new Breakdown();
                breakdown.setId(rs.getLong("id"));
                breakdown.setName(rs.getString("name"));
                breakdowns.add(breakdown);
            }

            return breakdowns;

        } catch (Exception e) {
            // Log and throw custom ServiceException
            e.printStackTrace();
            throw new ServiceException("Exception in getBreakdown", e);
        }
    }
}


---

Service Code

The service layer will call the repository and provide data to the controller.

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class BreakDownService {

    @Autowired
    private BreakDownRepository breakDownRepository;

    public List<Breakdown> getBreakdown() throws ServiceException {
        return breakDownRepository.getBreakdown();
    }
}


---

Controller Code

The controller exposes an API endpoint to fetch the dropdown data (breakdown).

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;

import java.util.List;

@RestController
public class BreakDownController {

    @Autowired
    private BreakDownService breakDownService;

    @GetMapping("/api/breakdown")
    public List<Breakdown> getBreakdown() {
        try {
            return breakDownService.getBreakdown();
        } catch (ServiceException e) {
            // Return a proper error response (you can customize this further)
            throw new RuntimeException("Error retrieving breakdown data", e);
        }
    }
}


---

Model Class (Breakdown)

This class represents the data structure returned by the stored procedure (with id and name).

public class Breakdown {
    private Long id;
    private String name;

    // Getters and Setters
    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }
}


---

Custom Stored Procedure Setup

This is the helper class used to execute the stored procedure and handle SYS_REFCURSOR.

import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.SqlOutParameter;
import org.springframework.jdbc.object.StoredProcedure;
import oracle.jdbc.OracleTypes;

import java.sql.Types;

public class CustomStoredProcedureSetup extends StoredProcedure {

    public CustomStoredProcedureSetup(JdbcTemplate jdbcTemplate, String procedureName) {
        super(jdbcTemplate.getDataSource(), procedureName);
        
        // Declare the output parameter as a REF_CURSOR
        declareParameter(new SqlOutParameter("OUT_RESULT", OracleTypes.CURSOR));
        compile();
    }
}


---

Service Exception

You might have a custom exception class for handling errors:

public class ServiceException extends Exception {

    public ServiceException(String message, Throwable cause) {
        super(message, cause);
    }
}


---

Explanation

1. Repository:

The BreakDownRepository executes the stored procedure IRIS.SP_GET_RC_DROPDOWN using JdbcTemplate and maps the output cursor to a list of Breakdown objects.



2. Service:

The BreakDownService acts as a service layer that interacts with the repository to fetch the breakdown data.



3. Controller:

The BreakDownController exposes the /api/breakdown API endpoint to the client to get the dropdown data.



4. CustomStoredProcedureSetup:

This helper class wraps around the stored procedure execution, declaring the output parameter (OUT_RESULT), which is a SYS_REFCURSOR.



5. Model Class:

The Breakdown model represents the individual data entries with id and name.




Run and Test

1. Database Configuration: Make sure the application.properties or application.yml file has the correct database connection details:



spring.datasource.url=jdbc:oracle:thin:@localhost:1521:xe
spring.datasource.username=<your_username>
spring.datasource.password=<your_password>
spring.datasource.driver-class-name=oracle.jdbc.OracleDriver

2. Testing:

Run your Spring Boot application and navigate to http://localhost:8080/api/breakdown to see the dropdown data.





---

This should work correctly now and allow you to execute the stored procedure and map the data for the dropdown. Let me know if you need more help!

